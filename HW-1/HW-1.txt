QUESTION-1 :

N = 4 and Intervals = 120

input (a):     [ 4.  1.  4.  1.]
input (b):     [ 6.  2.  1.  0.]
numpy b/w limited function:   [ 10.          10.57413673  10.99434853  11.26017952  11.37487221
  11.3452034   11.18121243  10.8958292   10.50444317  10.02439308
   9.47442532   8.87411213   8.2432785    7.60141659   6.96714449
   6.3577013    5.7885046    5.27277184   4.82122803   4.44189835
   4.13998938   3.91787052   3.77512288   3.70870113   3.71314335
   3.78086138   3.90247965   4.06721354   4.26326704   4.47826099
   4.69962311   4.91500044   5.11261702   5.28158998   5.41222572
   5.49621868   5.52683544   5.49901199   5.40938377   5.2562952
   5.03971338   4.76113367   4.42341995   4.03062725   3.58781457
   3.10082746   2.57609057   2.02040291   1.44075823   0.84417349
   0.23754156  -0.37247974  -0.97955769  -1.57773507  -2.16146374
  -2.72561622  -3.26547694  -3.77671361  -4.25535202  -4.69772005
  -5.1004591   -5.46047592  -5.77494669  -6.04132891  -6.25738668
  -6.4212532   -6.53149462  -6.58719349  -6.58804798  -6.53448534
  -6.42775679  -6.27004433  -6.06454515  -5.8155303   -5.52841282
  -5.20970774  -4.86702204  -4.50897503  -4.14505768  -3.78549504
  -3.44098973  -3.12248969  -2.84090328  -2.60675955  -2.42990661
  -2.31913829  -2.28188157  -2.32386756  -2.44885063  -2.65834785
  -2.95147347  -3.32478285  -3.77222157  -4.28517818  -4.85251856
  -5.46085167  -6.09472752  -6.7369976   -7.3692584   -7.97223759
  -8.52639294  -9.01237583  -9.41162205  -9.70691013  -9.88284874
  -9.92641449  -9.82735443  -9.57857227  -9.17640018  -8.62080765
  -7.915452    -7.06771183  -6.08855009  -4.99222183  -3.79606795
  -2.51994658  -1.18587232   0.18260297   1.56107509   2.92476511]
opencl b/w limited function:  [ 10.          10.57413578  10.99434948  11.26017952  11.37487221
  11.3452034   11.18121243  10.8958292   10.50444412  10.02439404
   9.47442436   8.87411308   8.2432785    7.60141659   6.96714401
   6.35770178   5.7885046    5.27277088   4.82122803   4.44189787
   4.13998938   3.91786909   3.77512336   3.7087009    3.71314335
   3.78086114   3.90247941   4.06721306   4.26326752   4.47826099
   4.69962311   4.91500044   5.11261702   5.28159046   5.41222477
   5.49621773   5.52683544   5.49901199   5.40938377   5.2562952
   5.03971386   4.76113415   4.423419     4.03062677   3.58781457
   3.10082793   2.57609034   2.02040339   1.44075823   0.84417361
   0.23754215  -0.37247968  -0.97955704  -1.57773519  -2.16146374
  -2.72561622  -3.26547742  -3.77671361  -4.25535202  -4.69771957
  -5.10045958  -5.46047592  -5.77494717  -6.04132891  -6.25738668
  -6.4212532   -6.53149557  -6.58719254  -6.58804846  -6.53448534
  -6.42775679  -6.27004385  -6.06454468  -5.8155303   -5.52841282
  -5.20970678  -4.86702251  -4.50897455  -4.14505768  -3.78549504
  -3.44098973  -3.12248945  -2.84090328  -2.60675907  -2.42990685
  -2.31913829  -2.28188157  -2.32386804  -2.44885063  -2.65834785
  -2.95147395  -3.32478189  -3.77222157  -4.28517818  -4.85251856
  -5.46085262  -6.09472656  -6.73699808  -7.3692584   -7.97223759
  -8.52639294  -9.01237583  -9.41162205  -9.70690918  -9.88284969
  -9.92641449  -9.82735348  -9.57857323  -9.17640018  -8.62080765
  -7.915452    -7.06771183  -6.08854961  -4.99222231  -3.79606795
  -2.51994658  -1.18587208   0.18260315   1.56107485   2.92476559]
pyopencl and numpy are equal:         True
python time:   0.000123023986816
opencl time:   0.000108242034912
~                                   
Case 1 N = 4 :

dx = 0.05
x_max = 0.05

No. of intervals = 1

OUTPUT:

input (a):     [ 2.  2.  3.  2.]
input (b):     [ 6.  0.  1.  1.]
numpy b/w limited function:   [ 9.]
opencl b/w limited function:  [ 9.]
pyopencl and numpy are equal:         True
python time:   9.91026560465e-05
opencl time:   0.000108321507772

RESULT: Python is faster to execute than OpenCL

Case 2 N = 4 :
 dx = 0.05
 x_max = 0.5

No. of intervals = 10

 OUTPUT:

input (a):     [ 2.  2.  4.  1.]
input (b):     [ 2.  5.  1.  0.]
numpy b/w limited function:   [  9.           9.67122364  10.18108177  10.52678204  10.70937729
  10.7336216   10.60772228  10.34298801   9.95342255   9.45522785]
opencl b/w limited function:  [  9.           9.67122269  10.18108177  10.52678108  10.70937824
  10.7336216   10.60772228  10.34298801   9.95342255   9.45522785]
pyopencl and numpy are equal:         True
python time:   9.552637736e-05
opencl time:   0.000107288360596

RESULT: Python is faster to execute than OpenCL

Case 3 n = 4 :

dx = 0.05
x_max = 2


No. of intervals = 40

OUTPUT:

input (a):     [ 3.  4.  3.  1.]
input (b):     [ 6.  3.  1.  5.]
numpy b/w limited function:   [ 11.          12.66480827  14.1299696   15.35570335  16.30885124
  16.9641304   17.30510902  17.32487869  17.02636719  16.42233467
  15.53496933  14.39518642  13.04157352  11.51907539   9.8774395
   8.16949272   6.44929504   4.77026653   3.18333006   1.73514414
   0.46652365  -0.58894396  -1.40601134  -1.96854568  -2.2699976
  -2.31348181  -2.11152482  -1.6854496   -1.06445098  -0.28436816
   0.61374688   1.58528197   2.58380508   3.56285119   4.4777236
   5.28715897   5.95488834   6.45096016   6.75279808   6.84599638]
opencl b/w limited function:  [ 11.          12.66480637  14.1299696   15.35570335  16.30885124
  16.9641304   17.30511093  17.32487869  17.02636909  16.42233467
  15.53496933  14.39518642  13.04157352  11.51907539   9.87744045
   8.16949272   6.44929552   4.77026653   3.18332958   1.7351439
   0.46652395  -0.58894479  -1.4060117   -1.9685452   -2.26999688
  -2.31348157  -2.11152458  -1.68545055  -1.06445134  -0.28436804
   0.61374724   1.58528185   2.58380556   3.56285143   4.4777236
   5.28715849   5.95488834   6.45096016   6.75279808   6.84599686]
pyopencl and numpy are equal:         True
python time:   0.000106573104858
opencl time:   0.000106652577718

RESULT: Python is faster to execute than OpenCL and we can see OpenCL execution speed approaching that of Python's.

Case 4 N = 4 :

dx = 0.05
x_max = 4

No. of intervals = 80

OUTPUT:

input (a):     [ 2.  3.  0.  4.]
input (b):     [ 1.  5.  6.  3.]
numpy b/w limited function:   [  9.          10.94456291  12.64900875  14.07565403  15.19582748
  15.99055958  16.45092201  16.57801437  16.38259697  15.88439846
  15.1111269   14.09723568  12.88248253  11.51034927  10.0263834
   8.47653198   6.90551662   5.35532236   3.86386395   2.4638381
   1.18185997   0.03786087  -0.95523477  -1.79149437  -2.47173166
  -3.00293279  -3.39749765  -3.67225409  -3.84733248  -3.94495392
  -3.98815441  -3.9995544   -4.0001812   -4.00840902  -4.03908157
  -4.10283041  -4.20561218  -4.34851074  -4.52778769  -4.73516083
  -4.95835829  -5.18182087  -5.38761759  -5.55648041  -5.66888618
  -5.706213    -5.65182638  -5.49211168  -5.2173748   -4.8225646
  -4.30779982  -3.67864418  -2.94615698  -2.12666297  -1.24129725
  -0.31527805   0.62298775   1.54299891   2.41336823   3.20311499
   3.88297653   4.42668819   4.81217527   5.02259731   5.04723454
   4.88208103   4.53024197   4.00201321   3.31467199   2.49201441
   1.56353998   0.56345654  -0.47055519  -1.49875093  -2.48082328
  -3.37751055  -4.15213871  -4.77213573  -5.21039772  -5.44649029]
opencl b/w limited function:  [  9.          10.94456291  12.64900875  14.07565498  15.19582748
  15.99055862  16.45092201  16.57801437  16.38259697  15.88439941
  15.1111269   14.09723568  12.88248158  11.51035118  10.0263834
   8.47653294   6.90551615   5.35532236   3.86386466   2.46383739
   1.18186069   0.03786027  -0.95523477  -1.79149413  -2.47173166
  -3.00293231  -3.39749694  -3.67225432  -3.84733295  -3.94495344
  -3.98815393  -3.99955487  -4.0001812   -4.00840902  -4.03908205
  -4.10283089  -4.20561218  -4.34851074  -4.52778673  -4.73516035
  -4.95835829  -5.18182135  -5.38761854  -5.55648041  -5.66888571
  -5.70621347  -5.65182638  -5.49211168  -5.21737432  -4.82256413
  -4.30779934  -3.67864466  -2.94615698  -2.12666297  -1.24129736
  -0.31527853   0.62298781   1.54299927   2.4133687    3.20311499
   3.88297606   4.42668772   4.8121748    5.02259731   5.04723454
   4.88208151   4.53024244   4.00201321   3.31467152   2.49201488
   1.56353939   0.56345624  -0.47055477  -1.49875057  -2.48082376
  -3.37751031  -4.15213823  -4.77213526  -5.21039772  -5.44649029]
pyopencl and numpy are equal:         True
python time:   0.000112215677897
opencl time:   0.000106414159139

RESULT: OpenCL executes faster than Python for 80 intervals (dx = 0.05 and x_max = 4)

ANSWER: After 80 intervals, PyOpenCL always executes faster than Python for Band Limited Function calculation for N = 4 frequency components (fixed)

QUESTION-3:

Case 1 dx = 0.05 and x_max = 6:

No. of frequency componenets = N = 1

OUTPUT:

input (a):     [ 1.]
input (b):     [ 1.]
numpy b/w limited function:   [ 1.          1.04872942  1.09483755  1.13820922  1.17873597  1.21631634
  1.25085676  1.28227055  1.31047928  1.33541262  1.3570081   1.37521172
  1.38997817  1.40127015  1.40905988  1.41332769  1.41406274  1.41126347
  1.40493691  1.39509869  1.38177323  1.36499429  1.34480345  1.32125139
  1.29439676  1.26430702  1.23105705  1.19473004  1.15541685  1.11321568
  1.06823218  1.02057862  0.97037405  0.91774416  0.86282027  0.80573988
  0.74664557  0.68568492  0.62301052  0.55877876  0.49315056  0.42628971
  0.35836339  0.28954101  0.2199952   0.14989954  0.07942927  0.00876039
 -0.06193066 -0.13246661 -0.20267147 -0.27236974 -0.34138727 -0.4095518
 -0.47669232 -0.5426414  -0.60723412 -0.67030913 -0.73170894 -0.79127961
 -0.84887248 -0.90434361 -0.9575544  -1.00837195 -1.056669   -1.10232484
 -1.14522541 -1.18526363 -1.22233939 -1.25635982 -1.28723991 -1.31490266
 -1.33927882 -1.36030757 -1.37793612 -1.39212072 -1.40282559 -1.41002417
 -1.41369843 -1.41383922 -1.41044617 -1.4035275  -1.3931011  -1.37919235
 -1.36183667 -1.34107685 -1.31696498 -1.28956163 -1.25893486 -1.22516167
 -1.18832588 -1.14851987 -1.10584354 -1.06040287 -1.01231205 -0.96169066
 -0.90866542 -0.85336947 -0.7959401  -0.73652184 -0.67526209 -0.61231452
 -0.54783708 -0.48198971 -0.41493824 -0.34684902 -0.27789283 -0.20824271
 -0.13807148 -0.06755579  0.00312948  0.07380688  0.14429909  0.21443135
  0.28402698  0.35291332  0.4209176   0.48786914  0.55360192  0.61795032
  0.68075478  0.74185771  0.80110586  0.85835212  0.91345251  0.96627021
  1.01667273  1.06453371  1.10973418  1.15216064  1.19170761  1.22827601
  1.26177382  1.29211831  1.31923294  1.34305036  1.36351085  1.38056326
  1.3941648   1.40428185  1.41088891  1.4139694   1.41351569  1.40952897
  1.40201926  1.39100504  1.37651408  1.35858274  1.33725548  1.31258583
  1.28463531  1.25347376  1.21917963  1.18183768  1.1415422   1.0983932
  1.05249858  1.00397384  0.95293915  0.89952314  0.84385824  0.78608412
  0.72634518  0.66479194  0.60157597  0.53685629  0.47079471  0.40355644
  0.33531082  0.2662257   0.19647521  0.12623364  0.05567646 -0.0150184
 -0.08567715 -0.15612173 -0.22617614 -0.29566514 -0.3644138  -0.432253
 -0.49901175 -0.56452328 -0.62862372 -0.69115174 -0.75195348 -0.81087565
 -0.86777109 -0.92249751 -0.97491723 -1.02490115 -1.07232332 -1.11706519
 -1.15901494 -1.19806707 -1.23412538 -1.26709902 -1.29690552 -1.32347047
 -1.34672689 -1.36661768]
opencl b/w limited function:  [ 1.          1.04872942  1.09483755  1.13820922  1.17873597  1.21631634
  1.25085676  1.28227055  1.31047928  1.33541262  1.3570081   1.37521172
  1.38997817  1.40127015  1.40905988  1.41332769  1.41406274  1.41126347
  1.40493691  1.39509869  1.38177323  1.36499429  1.34480345  1.32125139
  1.29439688  1.26430702  1.23105705  1.19473004  1.15541685  1.11321568
  1.06823218  1.02057862  0.97037405  0.91774416  0.86282027  0.80573988
  0.74664557  0.68568492  0.62301052  0.55877888  0.49315059  0.4262898
  0.35836333  0.28954101  0.2199952   0.14989954  0.07942927  0.00876039
 -0.0619306  -0.13246655 -0.20267141 -0.27236968 -0.34138715 -0.4095518
 -0.47669232 -0.5426414  -0.60723412 -0.67030913 -0.73170894 -0.79127961
-0.84887248 -0.90434361 -0.9575544  -1.00837195 -1.056669   -1.10232484
 -1.14522541 -1.18526363 -1.22233939 -1.25635982 -1.28723991 -1.31490266
 -1.33927882 -1.36030757 -1.37793612 -1.3921206  -1.40282559 -1.41002417
 -1.41369843 -1.41383922 -1.41044617 -1.4035275  -1.3931011  -1.37919235
 -1.36183667 -1.34107685 -1.31696498 -1.28956175 -1.25893486 -1.22516167
 -1.18832588 -1.14851987 -1.10584354 -1.06040287 -1.01231205 -0.96169066
 -0.90866542 -0.85336947 -0.7959401  -0.73652184 -0.67526209 -0.61231452
 -0.54783714 -0.48198971 -0.41493824 -0.34684908 -0.27789289 -0.20824277
 -0.13807154 -0.06755584  0.00312948  0.07380688  0.14429915  0.21443135
  0.28402698  0.35291332  0.42091763  0.48786914  0.55360192  0.61795032
  0.68075478  0.74185771  0.80110586  0.85835212  0.91345251  0.96627021
  1.01667273  1.06453371  1.10973418  1.15216064  1.19170761  1.22827601
  1.26177394  1.29211831  1.31923294  1.34305036  1.36351085  1.38056326
  1.3941648   1.40428185  1.41088891  1.4139694   1.41351569  1.40952897
  1.40201926  1.39100504  1.37651408  1.35858274  1.33725536  1.31258583
  1.28463531  1.25347376  1.21917963  1.18183768  1.1415422   1.0983932
  1.05249858  1.00397384  0.95293915  0.89952314  0.84385824  0.78608412
  0.72634518  0.66479194  0.60157597  0.53685629  0.47079474  0.40355644
  0.33531076  0.2662257   0.19647515  0.12623364  0.05567646 -0.0150184
 -0.08567709 -0.15612167 -0.22617602 -0.29566509 -0.3644138  -0.43225303
 -0.49901175 -0.56452328 -0.62862372 -0.69115174 -0.75195348 -0.81087571
 -0.86777109 -0.92249751 -0.97491723 -1.02490115 -1.07232332 -1.11706519
 -1.15901494 -1.19806707 -1.23412538 -1.26709902 -1.29690552 -1.32347035
 -1.34672689 -1.36661768]
pyopencl and numpy are equal:         True
python time:   3.99748484294e-05
opencl time:   0.000104188919067

RESULT: Python executes faster than PyOpenCL

Case 2 dx = 0.05 and x_max = 6 :

No. of frequency components = N = 2

// Output being omitted as they are too long //

Execution Speeds:

pyopencl and numpy are equal:         True
python time:   7.2717666626e-05
opencl time:   0.000106414159139

RESULT: Python executes faster than PyOpenCL

Case 3 dx = 0.05 and x_max = 6 :

No. of frequency components = N = 3

// Output being omitted as they are too long //

Execution Speeds:

pyopencl and numpy are equal:         True
python time:   0.000105301539103
opencl time:   0.000105381011963

RESULT: Python executes just a little faster than PyOpenCL

Case 4 dx = 0.05 and x_max = 6 :

No. of Frequency Components = N = 4

// Output being omitted as they are too long //

Execution Speeds:

pyopencl and numpy are equal:         True
python time:   0.000134944915771
opencl time:   0.000104586283366

RESULT: PyOpenCL executes faster than Python

ANSWER: When Number of Intervals = 120 is fixed (dx = 0.05 and x_max = 6), then PyOpenCL executes faster than Python for N >= 4 frequency components

Part B:

Case 1:

When Intervals = 120 (dx = 0.05 and x_max = 6.0) and N = 4:

Execution Speeds:

pyopencl and numpy are equal:         True
python time:   0.000120639801025
opencl time:   0.000107685724894

Case 2:

When Intervals = 200 (dx = 0.05 and x_max = 10.0) and N = 8:

Execution Speeds:

pyopencl and numpy are equal:         True
python time:   0.000266393025716
opencl time:   0.000104983647664

Case 3:

When Intervals = 400 (dx = 0.05 and x_max = 20.0) and N = 12:

Execution Speeds:

pyopencl and numpy are equal:         True
python time:   0.000521262486776
opencl time:   9.83079274495e-05

ANSWER: By increasing both N (frequency components) and Intervals(dx and x_max values), we can see that the Python execution speeds are decrementing whereas the PyOpenCL execution speeds are increasing.






